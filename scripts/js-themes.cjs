// Script for parsing colors from colors.styl and generating themes.ts
const fs = require('fs');
const path = require('path');

const stylusPath = path.join(__dirname, '../src/styles/colors.styl');
const outputPath = path.join(__dirname, '../src/constants/themes.ts');

const stylus = fs.readFileSync(stylusPath, 'utf8').replace(/\r\n/g, '\n');

// Regex to match theme blocks (captures all indented lines after theme name)
const themeRegex = /^(\.[\w-]+)\n((?:[ ]{2,}.+\n)+)/gm;
// Regex to match variables (captures value until end of line, including spaces and brackets)
const varRegex = /--([\w-]+)\s+([^\n]+)/g;

const themes = {};
let match;

while ((match = themeRegex.exec(stylus)) !== null) {
  const themeName = match[1].replace('.', '').replace('-theme', '').toLowerCase();
  const varsBlock = match[2];
  const vars = {};
  let varMatch;
  while ((varMatch = varRegex.exec(varsBlock)) !== null) {
    const rawKey = varMatch[1];
    const key = toCamelCase(rawKey);
    vars[key] = varMatch[2].trim();
  }
  themes[themeName] = vars;
}

function toCamelCase(str) {
  // Remove '-color' ending
  let s = str.replace(/-color$/, '');
  // Convert all -[letter or digit] to CamelCase
  s = s.replace(/-([a-zA-Z0-9])/g, (_, c) => c.toUpperCase());
  return s;
}

function toObjectString(obj) {
  return (
    '{\n' +
    Object.entries(obj)
      .map(
        ([key, value]) =>
          `  ${key}: {\n` +
          Object.entries(value)
            .map(([k, v]) => `    ${k}: '${v}',`)
            .join('\n') +
          '\n  },'
      )
      .join('\n') +
    '\n}'
  );
}

const fileContent = `// This file is auto-generated by scripts/js-themes.cjs. Do not edit manually.\nexport const THEMES = ${toObjectString(themes)} as const;\n`;

fs.writeFileSync(outputPath, fileContent);
console.log('themeColors.ts generated successfully!');
